name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: smartpay_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ZEN/RichMove.SmartPay.sln

    - name: Build
      run: dotnet build ZEN/RichMove.SmartPay.sln --no-restore --configuration Release

    - name: Test with coverage
      run: |
        dotnet test ZEN/RichMove.SmartPay.sln --no-build --configuration Release \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:CoverletOutput=./TestResults/ \
          /p:Exclude="[*]*.Migrations.*" \
          --logger "trx;LogFileName=test-results.trx" \
          --logger "console;verbosity=detailed"

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.13
      with:
        reports: '**/TestResults/coverage.cobertura.xml'
        targetdir: 'CoverageReport'
        reporttypes: 'HtmlInline;Cobertura;Badges'
        verbosity: 'Info'

    - name: Check coverage threshold
      run: |
        coverage=$(grep -oP 'line-rate="\K[^"]+' ./ZEN/TestResults/coverage.cobertura.xml | head -1)
        coverage_percent=$(echo "$coverage * 100" | bc -l | cut -d. -f1)
        echo "Coverage: ${coverage_percent}%"
        if [ "$coverage_percent" -lt 99 ]; then
          echo "Coverage ${coverage_percent}% is below threshold of 99%"
          exit 1
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: CoverageReport/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/*.trx'

  mutation-testing:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install Stryker
      run: dotnet tool install -g dotnet-stryker

    - name: Restore dependencies
      run: dotnet restore ZEN/RichMove.SmartPay.sln

    - name: Run mutation testing
      run: |
        cd ZEN/TESTS/Core.Tests
        dotnet stryker --threshold-high 95 --threshold-low 90 --threshold-break 85

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  contract-testing:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Schemathesis
      run: pip install schemathesis

    - name: Build API
      run: dotnet build ZEN/SOURCE/Api/RichMove.SmartPay.Api.csproj --configuration Release

    - name: Start API
      run: |
        dotnet run --project ZEN/SOURCE/Api/RichMove.SmartPay.Api.csproj --configuration Release &
        sleep 10

    - name: Run contract tests
      run: |
        schemathesis run http://localhost:5000/swagger/v1/swagger.json \
          --checks all \
          --hypothesis-max-examples 100 \
          --validate-schema true

  load-testing:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - uses: actions/checkout@v4

    - name: Setup k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build and start API
      run: |
        dotnet build ZEN/SOURCE/Api/RichMove.SmartPay.Api.csproj --configuration Release
        dotnet run --project ZEN/SOURCE/Api/RichMove.SmartPay.Api.csproj --configuration Release &
        sleep 10

    - name: Run k6 smoke test
      run: |
        echo 'import http from "k6/http";
        import { check } from "k6";

        export let options = {
          stages: [
            { duration: "30s", target: 100 },
            { duration: "1m", target: 100 },
            { duration: "30s", target: 0 },
          ],
          thresholds: {
            http_req_duration: ["p(95)<200"],
            http_req_failed: ["rate<0.1"],
          },
        };

        export default function() {
          let res = http.get("http://localhost:5000/health");
          check(res, {
            "status is 200": (r) => r.status === 200,
          });
        }' > smoke-test.js

        k6 run smoke-test.js