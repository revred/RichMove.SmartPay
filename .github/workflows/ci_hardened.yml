name: ci-hardened

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

permissions:
  contents: read

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            9.0.x

      - name: Restore
        run: dotnet restore ZEN/RichMove.SmartPay.sln

      - name: Build (Release, warn as error)
        run: dotnet build ZEN/RichMove.SmartPay.sln --configuration Release -warnaserror --no-restore

      - name: Format Check
        run: dotnet format ZEN/RichMove.SmartPay.sln --verify-no-changes

      - name: Test with coverage (Cobertura)
        run: |
          dotnet test ZEN/RichMove.SmartPay.sln --no-build --configuration Release \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=cobertura \
            /p:CoverletOutput=./TestResults/ \
            /p:Exclude="[*]*.Migrations.*"

      - name: Generate & publish coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.8
        with:
          reports: '**/TestResults/coverage.cobertura.xml'
          targetdir: 'CoverageReport'
          reporttypes: 'HtmlInline;Cobertura;Badges'
          verbosity: 'Info'

      - name: Enforce coverage gate (>= 60% line)
        shell: bash
        run: |
          FILE=$(git ls-files '**/TestResults/coverage.cobertura.xml' | head -n 1)
          if [ -z "$FILE" ]; then
            echo "coverage.cobertura.xml not found"; exit 1
          fi
          RATE=$(grep -oP 'line-rate="\K[^"]+' "$FILE" | head -1)
          PCT=$(python - << 'PY'
          print(int(float("$RATE")*100))
          PY
          )
          echo "Coverage: ${PCT}%"
          if [ "$PCT" -lt 60 ]; then
            echo "Coverage ${PCT}% is below threshold of 60%"; exit 1; fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: CoverageReport/

  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          args: detect --no-banner --redact --report-format sarif --report-path gitleaks.sarif
      - name: Upload gitleaks report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif