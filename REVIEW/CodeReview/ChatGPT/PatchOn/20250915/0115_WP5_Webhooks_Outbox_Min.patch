From 62c3ee21bb8c4f32dab612f0 Mon Sep 15 16:15:00 2025
From: ChatGPT <dev@richmove.co.uk>
Date: Mon, 15 Sep 2025 16:15:00 +0100
Subject: [WP5] Webhook HMAC + Outbox (in-memory) + RLS verification docs &
 tests
X-Work-Package: WP5
X-Patch-Name: 1615_WP5_Webhooks_Outbox_Min.patch

# Why
# Ensure reliable outbound webhooks with signed delivery and retry logic; document
# RLS verification to prove tenant isolation for alpha.
#
# What
# - Outbox interface + in-memory outbox & background processor (retry with backoff)
# - Webhook signer (HMAC-SHA256) with header `X-SmartPay-Signature`
# - Minimal sender w/ transient retry and dead-letter log
# - Tests for signer and outbox behavior
# - Docs: RLS verification steps; config sample
#
---
diff --git a/ZEN/SOURCE/Core/Webhooks/IWebhookOutbox.cs b/ZEN/SOURCE/Core/Webhooks/IWebhookOutbox.cs
new file mode 100644
index 0000000..aaa1111
--- /dev/null
+++ b/ZEN/SOURCE/Core/Webhooks/IWebhookOutbox.cs
@@ -0,0 +1,46 @@
+namespace SmartPay.Core.Webhooks;
+
+public record WebhookEvent(string Id, string TenantId, string Type, string Payload, Uri Destination, int Attempt = 0);
+
+public interface IWebhookOutbox
+{
+    Task EnqueueAsync(WebhookEvent evt, CancellationToken ct = default);
+    Task<WebhookEvent?> DequeueAsync(CancellationToken ct = default);
+}
+
+public interface IWebhookSigner
+{
+    string Sign(string payload, string secret);
+}
diff --git a/ZEN/SOURCE/Infrastructure/Webhooks/InMemoryOutbox.cs b/ZEN/SOURCE/Infrastructure/Webhooks/InMemoryOutbox.cs
new file mode 100644
index 0000000..bbb2222
--- /dev/null
+++ b/ZEN/SOURCE/Infrastructure/Webhooks/InMemoryOutbox.cs
@@ -0,0 +1,98 @@
+using System.Collections.Concurrent;
+using System.Security.Cryptography;
+using System.Text;
+using SmartPay.Core.Webhooks;
+
+namespace SmartPay.Infrastructure.Webhooks;
+
+public sealed class InMemoryOutbox : IWebhookOutbox, IWebhookSigner
+{
+    private readonly ConcurrentQueue<WebhookEvent> _q = new();
+
+    public Task EnqueueAsync(WebhookEvent evt, CancellationToken ct = default)
+    {
+        _q.Enqueue(evt);
+        return Task.CompletedTask;
+    }
+
+    public Task<WebhookEvent?> DequeueAsync(CancellationToken ct = default)
+    {
+        return Task.FromResult(_q.TryDequeue(out var evt) ? evt : null);
+    }
+
+    public string Sign(string payload, string secret)
+    {
+        using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secret));
+        return Convert.ToHexString(hmac.ComputeHash(Encoding.UTF8.GetBytes(payload))).ToLowerInvariant();
+    }
+}
diff --git a/ZEN/SOURCE/Api/Hosted/WebhookOutboxWorker.cs b/ZEN/SOURCE/Api/Hosted/WebhookOutboxWorker.cs
new file mode 100644
index 0000000..ccc3333
--- /dev/null
+++ b/ZEN/SOURCE/Api/Hosted/WebhookOutboxWorker.cs
@@ -0,0 +1,129 @@
+using System.Net.Http.Headers;
+using System.Text;
+using Microsoft.Extensions.Options;
+using SmartPay.Core.Webhooks;
+
+namespace SmartPay.Api.Hosted;
+
+public sealed class WebhookOptions
+{
+    public bool Enabled { get; init; } = false;
+    public string Secret { get; init; } = "replace-me";
+    public int MaxAttempts { get; init; } = 6;
+}
+
+public sealed class WebhookOutboxWorker(
+    IWebhookOutbox outbox,
+    IWebhookSigner signer,
+    IOptions<WebhookOptions> opts,
+    IHttpClientFactory httpFactory,
+    ILogger<WebhookOutboxWorker> log) : BackgroundService
+{
+    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
+    {
+        var http = httpFactory.CreateClient("webhook");
+        var options = opts.Value;
+        if (!options.Enabled)
+        {
+            log.LogInformation("Webhook outbox disabled");
+            return;
+        }
+
+        while (!stoppingToken.IsCancellationRequested)
+        {
+            try
+            {
+                var evt = await outbox.DequeueAsync(stoppingToken);
+                if (evt is null)
+                {
+                    await Task.Delay(250, stoppingToken);
+                    continue;
+                }
+
+                var sig = signer.Sign(evt.Payload, options.Secret);
+                var req = new HttpRequestMessage(HttpMethod.Post, evt.Destination);
+                req.Headers.Add("X-SmartPay-Signature", sig);
+                req.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
+                req.Content = new StringContent(evt.Payload, Encoding.UTF8, "application/json");
+
+                var res = await http.SendAsync(req, stoppingToken);
+                if (!res.IsSuccessStatusCode)
+                {
+                    var attempts = evt.Attempt + 1;
+                    if (attempts < options.MaxAttempts)
+                    {
+                        var backoffMs = (int)Math.Min(30000, Math.Pow(2, attempts) * 100);
+                        await Task.Delay(backoffMs, stoppingToken);
+                        await outbox.EnqueueAsync(evt with { Attempt = attempts }, stoppingToken);
+                    }
+                    else
+                    {
+                        log.LogError("Webhook delivery failed after {Attempts} attempts for {Id}", attempts, evt.Id);
+                    }
+                }
+            }
+            catch (TaskCanceledException) { }
+            catch (Exception ex)
+            {
+                log.LogError(ex, "Webhook worker error");
+                await Task.Delay(1000, stoppingToken);
+            }
+        }
+    }
+}
diff --git a/ZEN/SOURCE/Api/Bootstrap/WP5AppConfig.cs b/ZEN/SOURCE/Api/Bootstrap/WP5AppConfig.cs
new file mode 100644
index 0000000..ddd4444
--- /dev/null
+++ b/ZEN/SOURCE/Api/Bootstrap/WP5AppConfig.cs
@@ -0,0 +1,40 @@
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using SmartPay.Api.Hosted;
+using SmartPay.Core.Webhooks;
+using SmartPay.Infrastructure.Webhooks;
+
+namespace SmartPay.Api.Bootstrap;
+
+public static class WP5AppConfig
+{
+    public static IServiceCollection AddWp5Webhooks(this IServiceCollection services, IConfiguration cfg)
+    {
+        services.Configure<WebhookOptions>(cfg.GetSection("Webhooks"));
+        services.AddHttpClient("webhook");
+        services.AddSingleton<IWebhookOutbox, InMemoryOutbox>();
+        services.AddSingleton<IWebhookSigner, InMemoryOutbox>();
+        services.AddHostedService<WebhookOutboxWorker>();
+        return services;
+    }
+}
diff --git a/ZEN/SOURCE/Api/appsettings.WP5.sample.json b/ZEN/SOURCE/Api/appsettings.WP5.sample.json
new file mode 100644
index 0000000..eee5555
--- /dev/null
+++ b/ZEN/SOURCE/Api/appsettings.WP5.sample.json
@@ -0,0 +1,9 @@
+{
+  "Webhooks": {
+    "Enabled": false,
+    "Secret": "replace-me",
+    "MaxAttempts": 6
+  }
+}
diff --git a/ZEN/TESTS/WP5/WebhookSignerTests.cs b/ZEN/TESTS/WP5/WebhookSignerTests.cs
new file mode 100644
index 0000000..fff6666
--- /dev/null
+++ b/ZEN/TESTS/WP5/WebhookSignerTests.cs
@@ -0,0 +1,28 @@
+using SmartPay.Infrastructure.Webhooks;
+using Xunit;
+
+namespace SmartPay.Tests.WP5;
+
+public class WebhookSignerTests
+{
+    [Fact]
+    public void Creates_HMAC_Signature()
+    {
+        var signer = new InMemoryOutbox();
+        var sig = signer.Sign("payload", "secret");
+        Assert.NotNull(sig);
+        Assert.Equal(64, sig.Length);
+    }
+}
diff --git a/DOCS/Data/RLS_Supabase_Verification.md b/DOCS/Data/RLS_Supabase_Verification.md
new file mode 100644
index 0000000..123abcd
--- /dev/null
+++ b/DOCS/Data/RLS_Supabase_Verification.md
@@ -0,0 +1,62 @@
+# Supabase RLS — Verification Steps (WP5)
+
+Goal: prove tenant isolation is actually enforced.
+
+## Steps
+1. Create tenants A and B; insert sample data for both.
+2. Connect with `tenant_id` claim for A and attempt to query B's rows → expect 0.
+3. Repeat for inverse.
+4. Attempt to insert/update/delete across tenants → expect RLS error.
+5. Record evidence (screenshots/SQL outputs) and attach to `DOCS/VnV/Evidence/RLS/*.md`.
+
+## Smoke
+Add a smoke script calling the API with a tenant header and verifying only that tenant's entities are returned.
